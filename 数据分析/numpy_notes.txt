import numpy as np

数组的创建
a=np.array([1,2,3,4])
#创建一个数组时，还可以指定数据类型，加入dtype
a=np.array([1,2,3,4],dtype=np.float64)
#数组属性typeDict可以查看数组中支持的数据类型
#创建二维数组对象类型
a=np.array([1,2],[3,4])
#在创建一个n维数组时，如果数组中有多种数据类型，会自动进行识别与转换
a=np.array([1,2.5,"a"]) => array(["1","2.5","a"],dtype='<U32')

arange 创建指定区间的数组，类似python中的range
#注意：arange指的是array-range,不是arrange
a=np.arange(1,10,2)   => [1,3,5,7,9]
#arange比python中的range更加宽泛，其增量值可以是小数或负数
a=np.arange(1,10,0.5)  => [1,1.5,2,2.5,...9.5]

np.ndim 维度

创建值全是1的数组，shape指定每个维度的大小
np.ones(shape=(5,3)) 5行3列
=> array([[1.,1.,1.],
        [1.,1.,1.],
        [1.,1.,1.],
        [1.,1.,1.],
        [1.,1.,1.]])

创建值全是1的数组，数组的形状和参数数组的形状相同
np.ones_like(np.array([[1,2],[3,4]]))
=>array([[1,1],
        [1,1]])

创建值全是0的数组，shape指定每个维度的大小
np.zeros((3,2,3))
np.zeros_like(np.array([[1,2],[3,4]]))

创建一个数组，数组的初始值是不确定的（创建一个我没有初始化的数组）
np.empty(shape=(5,4,3))
np.empty_like(np.array([[1,2],[3,4]]))

np.full(n,x) 创建一个数组，数组中的结构为n,数组中每个元素的值为x
np.full((2,3),np.pi) =>创建2行3列的数组，数组中每个元素都是π

等差数列
np.linspace()
np.linspace(1,10,num=100) 在0到10之间取100个数，这些数都是等差的，如果加入endpoint=False不包含10

根据lamda表达式的结果集创建一个数组
n=np.fromfunction(lamda x:x+1,(10,)) =>0到10传10个数计算
n=np.fromfunction(lamda x,y:(x+1)*(y+1),(9,9)) => (9,9)可以理解为(range(9),range(9))

随机数
#根据指定范围产生指定个数年的随机整数,在0到15之间产生随机数，数组的结构为（2,3）
np.random.randint(0,150,(2,3))
#产生指定形状的随机数组，这些随机数符合正态分布
np.random.randn(2,3,4)
#根据指定范围产生指定个数的随机数，在0~150之间产生随机数组，数组的结构为(2,3)
np.random.uniform(0,150,(2,3))

数组是可以计算的
数组和数组之间也是可以计算的，对应相应位置上的元素进行计算

矩阵运算
a1=np.random.randint(0,100,(2,3))
a2=np.random.randint(0,100,(3,2))
display(a1,a2)
np.dot(a1,a2) #矩阵运算

数组也可以有索引和切片
可以通过索引对数组中的内容进行修改
还可以通过索引获取多个值，同时也可以通过索引进行赋值操作（一个或多个都可以） arr[[2,3,4]]=[123,456,789]
高维数组也可以有索引和切片
arr=np.arange(12).reshape(3,4)
arr[0,1]或a[0][1]都指向第1行第2列
arr[0:2] 第0到2行
arr[0:2,0:2] 切片选取0、1行，0、1列

布尔索引 #用布尔值True/False作为索引
names=np.array(["James","James","Penny","Penny","Penny","Shelton","Shelton"])
names[names=="Penny"]  #获取所有Penny
names[(names=="Penny")|(names=="Shelton")]  #获取所有Penny和Shelton  |或 &并

np.sum(arr)
np.sum(arr，axis=1) #计算每一行的值
np.sum(arr，axis=0) #计算每一列的和


