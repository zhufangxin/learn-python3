#生成器：按照某种算法推算出列表元素。这样就不必创建完整的list，从而节省大量的空间。一边循环一边计算的机制称为生成器。
#创建generator的方法：
#1.把一个列表生成式的[]改成()  g = (x * x for x in range(10))  通过next()函数获得generator的下一个返回值
#2.函数定义中包含yield关键字.在执行过程中，遇到yield就中断，下次从上次返回的yield语句处继续执行。

#练习：杨辉三角定义如下：
#
#          1
#         / \
#        1   1
#       / \ / \
#      1   2   1
#     / \ / \ / \
#    1   3   3   1
#   / \ / \ / \ / \
#  1   4   6   4   1
# / \ / \ / \ / \ / \
#1   5   10  10  5   1

# -*- coding: utf-8 -*-
def triangles():
	L=[1]
	while True:
		yield L 
		L=[L[i]+L[i+1] for i in range(len(L)-1)]
		L.insert(0,1)
		L.append(1)


# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('pass!')
else:
    print('fail!')
